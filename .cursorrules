# Static CMS - Reglas de Cursor

## üéØ Contexto del Proyecto

Este es un sistema de gesti√≥n de contenido est√°tico (Static CMS) desarrollado en espa√±ol. El proyecto est√° organizado en m√≥dulos independientes:

- **api/**: Backend Node.js + Express con SQLite
- **panel_admin/**: Frontend JavaScript + Vite (sin React)
- **public/**: Sitio est√°tico generado
- **template/**: Sistema de plantillas
- **documentacion/**: Documentaci√≥n completa

## üìù Reglas de C√≥digo

### Lenguaje y Comunicaci√≥n
- **Siempre responder en espa√±ol**
- **Usar terminolog√≠a t√©cnica apropiada**
- **Explicar conceptos complejos de forma clara**

### Estructura de Archivos
- **Mantener la organizaci√≥n modular** del proyecto
- **Seguir las convenciones de nomenclatura** establecidas
- **Crear archivos en los directorios apropiados**

### Backend (API)
- **Usar Node.js 18+ y Express.js**
- **Base de datos SQLite** para simplicidad
- **Autenticaci√≥n JWT + Telegram Bot API**
- **Validaci√≥n con Joi**
- **Logging con Winston**
- **Seguridad con Helmet, CORS, Rate Limiting**

### Frontend (Panel Admin)
- **JavaScript vanilla o framework alternativo**
- **Vite como build tool**
- **Tailwind CSS para estilos**
- **Estado global con alternativas a React Query**
- **Formularios con JavaScript vanilla**
- **Iconos con alternativas a Lucide React**

### Base de Datos
- **SQLite para desarrollo y producci√≥n**
- **Migraciones autom√°ticas**
- **Backup autom√°tico**
- **√çndices apropiados para rendimiento**

### Seguridad
- **Validaci√≥n de entrada** en todos los endpoints
- **Sanitizaci√≥n de datos** antes de almacenar
- **Rate limiting** para prevenir abuso
- **Headers de seguridad** apropiados
- **Validaci√≥n de archivos** multimedia

## üèóÔ∏è Arquitectura

### Patrones de Dise√±o
- **MVC** para la API
- **Component-based** para React
- **Service Layer** para l√≥gica de negocio
- **Repository Pattern** para acceso a datos

### API RESTful
- **Endpoints RESTful** est√°ndar
- **C√≥digos de estado HTTP** apropiados
- **Respuestas JSON** consistentes
- **Documentaci√≥n OpenAPI** (Swagger)

### Sistema de Plantillas
- **Motor de plantillas personalizado**
- **Sintaxis simple**: `{{ variable }}` y `{% if condition %}`
- **Herencia de plantillas**
- **Componentes reutilizables**
- **Helpers para formateo**

## üìã Convenciones

### Nomenclatura
- **Variables**: camelCase
- **Funciones**: camelCase
- **Clases**: PascalCase
- **Constantes**: UPPER_SNAKE_CASE
- **Archivos**: kebab-case
- **Directorios**: kebab-case

### Comentarios
- **Comentarios en espa√±ol**
- **JSDoc** para funciones y clases
- **Comentarios explicativos** para l√≥gica compleja
- **TODO/FIXME** para tareas pendientes

### Commits
- **Usar # para issues**: `[#1234] feat: nueva funcionalidad`
- **Prefijos**: feat, fix, docs, style, refactor, test, chore
- **Mensajes descriptivos** en espa√±ol
- **M√°ximo 255 caracteres** en el mensaje de commit

### Documentaci√≥n
- **README.md** en cada m√≥dulo
- **Documentaci√≥n t√©cnica** completa
- **Ejemplos de uso**
- **Troubleshooting** com√∫n

## üîß Configuraci√≥n

### Variables de Entorno
- **Archivos .env.example** en cada m√≥dulo
- **Validaci√≥n de variables** requeridas
- **Valores por defecto** apropiados
- **Documentaci√≥n** de cada variable

### Dependencias
- **Versiones espec√≠ficas** en package.json
- **Actualizaciones regulares** de seguridad
- **Auditor√≠a de vulnerabilidades**
- **Dependencias m√≠nimas** necesarias

## üöÄ Despliegue

### Restricciones
- **NO usar Docker** en ning√∫n m√≥dulo del proyecto
- **NO usar TypeScript** en ning√∫n m√≥dulo del proyecto
- **NO usar React** en ning√∫n m√≥dulo del proyecto
- **Despliegue directo** en servidor con Node.js
- **Configuraci√≥n manual** de servicios

### Desarrollo
- **Hot reload** para desarrollo
- **Proxy** configurado entre frontend y backend
- **Logs detallados** en desarrollo
- **Debugging** facilitado

### Producci√≥n
- **Optimizaci√≥n** de assets
- **Compresi√≥n** de archivos
- **Cache** apropiado
- **Monitoreo** de rendimiento

## üß™ Testing

### Backend
- **Tests unitarios** con Jest
- **Tests de integraci√≥n** para API
- **Tests de base de datos**
- **Cobertura de c√≥digo**

### Frontend
- **Tests de componentes** con alternativas a React Testing Library
- **Tests de funciones** JavaScript
- **Tests de integraci√≥n** con API
- **Tests E2E** (preparado)

## üìä Rendimiento

### M√©tricas Objetivo
- **First Contentful Paint**: < 1.5s
- **Largest Contentful Paint**: < 2.5s
- **Cumulative Layout Shift**: < 0.1
- **First Input Delay**: < 100ms

### Optimizaciones
- **Lazy loading** para recursos pesados
- **Compresi√≥n** de archivos
- **Cache** de navegador
- **Optimizaci√≥n** de im√°genes

## üîç Debugging

### Logs
- **Logs estructurados** con Winston
- **Niveles apropiados** (error, warn, info, debug)
- **Contexto** en cada log
- **Rotaci√≥n** de archivos de log

### Errores
- **Manejo centralizado** de errores
- **Respuestas de error** consistentes
- **Logs de errores** detallados
- **Recuperaci√≥n** graceful

## ü§ù Contribuci√≥n

### Pull Requests
- **Descripci√≥n clara** del cambio
- **Tests incluidos**
- **Documentaci√≥n actualizada**
- **Revisi√≥n de c√≥digo** requerida

### Issues
- **Templates** para bugs y features
- **Reproducci√≥n** de bugs
- **Contexto** completo
- **Priorizaci√≥n** clara

## üìö Referencias

### Documentaci√≥n
- **README principal** actualizado
- **Documentaci√≥n t√©cnica** completa
- **Gu√≠as de usuario**
- **API documentation**

### Herramientas
- **ESLint + Prettier** para linting
- **Husky** para git hooks
- **Commitizen** para commits
- **Semantic Release** (preparado)

## üé® UI/UX

### Dise√±o
- **Consistencia visual** en todo el sistema
- **Accesibilidad** (WCAG 2.1)
- **Responsive design** mobile-first
- **Dark mode** (preparado)

### Componentes
- **Reutilizables** y modulares
- **Par√°metros documentados** con JSDoc
- **Documentaci√≥n** de uso
- **Tests** de componentes

## üîê Autenticaci√≥n

### Telegram Bot
- **Configuraci√≥n** del bot
- **Validaci√≥n** de c√≥digos
- **Seguridad** de tokens
- **Fallback** para errores

### JWT
- **Tokens seguros** con expiraci√≥n
- **Refresh tokens** (preparado)
- **Blacklisting** de tokens
- **Rotaci√≥n** de secretos

## üì± Funcionalidades

### Gesti√≥n de Contenido
- **CRUD completo** para todas las entidades
- **Validaci√≥n** de datos
- **Relaciones** entre entidades
- **B√∫squeda** y filtrado

### Constructor de Sitio
- **Generaci√≥n** de archivos est√°ticos
- **Optimizaci√≥n** autom√°tica
- **Incremental builds**
- **Rollback** de versiones

### Multimedia
- **Subida** de archivos
- **Validaci√≥n** de tipos
- **Optimizaci√≥n** de im√°genes
- **Miniaturas** autom√°ticas

## üö® Consideraciones Especiales

### Seguridad
- **Validaci√≥n** de entrada siempre
- **Sanitizaci√≥n** de datos
- **Headers** de seguridad
- **Auditor√≠a** regular

### Escalabilidad
- **Arquitectura modular**
- **Caching** apropiado
- **Optimizaci√≥n** de consultas
- **Monitoreo** de recursos

### Mantenibilidad
- **C√≥digo limpio** y legible
- **Documentaci√≥n** actualizada
- **Tests** automatizados
- **Refactoring** regular

# Reglas de navegaci√≥n para SPAs
- Toda app Vue o Angular debe usar navegaci√≥n basada en hash (#) para rutas internas (hash mode).

# Flujo de trabajo de documentaci√≥n y commits
- Toda documentaci√≥n de cambios debe realizarse antes del commit correspondiente.

---

**Nota**: Estas reglas deben seguirse para mantener la consistencia y calidad del c√≥digo en todo el proyecto Static CMS. 