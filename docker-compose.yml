version: '3.8'

services:
  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: static-cms-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_PATH=/app/api/data/cms.db
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - UPLOAD_PATH=/app/api/uploads
      - MAX_FILE_SIZE=10485760
    volumes:
      - api_data:/app/api/data
      - api_uploads:/app/api/uploads
      - api_logs:/app/api/logs
    networks:
      - static-cms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Panel de Administración (desarrollo)
  admin-dev:
    build:
      context: ./panel_admin
      dockerfile: Dockerfile.dev
    container_name: static-cms-admin-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - VITE_API_URL=http://localhost:3000/api
      - VITE_APP_TITLE=Static CMS Admin
    volumes:
      - ./panel_admin:/app
      - /app/node_modules
    networks:
      - static-cms-network
    depends_on:
      - api
    profiles:
      - development

  # Nginx (producción)
  nginx:
    image: nginx:alpine
    container_name: static-cms-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_site:/var/www/html
    networks:
      - static-cms-network
    depends_on:
      - api
    profiles:
      - production

  # Redis (para cache y sesiones)
  redis:
    image: redis:alpine
    container_name: static-cms-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - static-cms-network
    command: redis-server --appendonly yes
    profiles:
      - production

  # Certbot (para SSL automático)
  certbot:
    image: certbot/certbot
    container_name: static-cms-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
    profiles:
      - production
      - ssl

volumes:
  api_data:
    driver: local
  api_uploads:
    driver: local
  api_logs:
    driver: local
  redis_data:
    driver: local
  static_site:
    driver: local

networks:
  static-cms-network:
    driver: bridge

# Variables de entorno requeridas
# JWT_SECRET=your-super-secret-jwt-key
# TELEGRAM_BOT_TOKEN=your-telegram-bot-token
# TELEGRAM_CHAT_ID=your-telegram-chat-id
# DOMAIN=your-domain.com
# SSL_EMAIL=your-email@domain.com 